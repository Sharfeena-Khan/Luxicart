<%-include("../layout/adminHeader.ejs")-%>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfkit/0.11.0/pdfkit.js"></script>

<section>
  <div class="content">
    <div class="row" style="margin-top: 10px;">
      <div class="container d-flex mb-5 mt-0">
        <div>
          <h4><strong> Dashboard</strong> </h4>
        </div>
        <div class="ms-auto me-5 mb-2 d-flex gap-4">
          <span>
            <!-- <button id="exportButton" class="btn text-white" style="background: #f35800;">Export</button> -->
            <div class="dropdown">
              <button id="exportButton" class="btn text-white dropdown-toggle" type="button" 
              data-bs-toggle="dropdown" aria-expanded="false" style="background: #f35800;">
              <i class="fa fa-download px-2" aria-hidden="true"></i>Export</button> 
              <ul class="dropdown-menu">
                <li><a class="dropdown-item" id="pdfDownlod" href="#">PDF File</a></li>
                <li><a class="dropdown-item" id="excelDownlod" href="#">Excel</a></li>
              </ul>
            </div>

           
            
            
          </span>
          <span>
            <select class="form-select" aria-label="Default select example" id="selectionButton">
              <option selected value="0">Select</option>
              <option value="0">Today</option>
              <option value="7">7 Days</option>
              <option value="30">30 Days</option>
              <option value="365">365 Days</option>
            </select>
          </span>
        </div>
      </div>

      <div class="d-flex gap-5 mt-5">
        <!-- Total Sales Chart -->
        <div class="d-flex gap-4">
          <div>
            Total Sales : <br>
            <span class="fw-bold fs-3" id="salesDataDisplay" >₹<%= salesData %> </span>
          </div>
          <div class="p-2" style="margin-top: -80px;">
            <canvas id="myTotalSalesChart" width="160px"></canvas>
          </div>
        </div>

        <!-- Total Revenue Chart -->
        <div class="d-flex gap-4 mx-4">
          <div class="">
            Total Revenue : <br>
            <span class="fw-bold fs-3" id="revenueDataDisplay"> ₹<%=  revenueData %></span>
          </div>
          <div class="p-2" style="margin-top: -80px;">
            <canvas id="myChart" width="160px"></canvas>
          </div>
        </div>

        <!-- User Count Chart -->
        <div class="d-flex gap-4 mx-4">
          <div>
            User Count : <br>
            <span class="fw-bold fs-3" id="usrCount"> <%= userCount %></span>
          </div>
          <div class="p-2" style="margin-top: -80px;">
            <canvas id="userCountChart" width="160px"></canvas>
          </div>
        </div>
      </div>
    </div>

    <div class="row" style="margin-top: 90px;">
      <div class="container mb-5 mt-0">
        <h5 class="fw-bold">Most Sold Product</h5>
        <div class="col-9 mt-4 p-2" style="margin-top: -80px; margin-left: 50px;">
          <canvas id="mostSoldChart" width="300" height="150"></canvas>
        </div>
      </div>
    </div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>


<script>
  document.addEventListener('DOMContentLoaded', async () => {
    // Fetch initial data and update charts
    await fetchAndUpdateCharts();
    // Add event listener for selection change
    const selectionButton = document.getElementById('selectionButton');
    selectionButton.addEventListener('change', async () => {
      await fetchAndUpdateCharts();
    });

    const exportPDFReport = document.getElementById('pdfDownlod')
  exportPDFReport.addEventListener('click', async function() {
   await generatePDF(); // Assuming generatePDF is a function without parameters
});
  });

 

  async function generatePDF() {
  try {
    // Get selected days
    const selectedDays = Number(document.getElementById('selectionButton').value);

    // Fetch data for the selected days
    const url = `/admin/adminPanel?selectedDays=${encodeURIComponent(selectedDays)}`;
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
    });

    if (response.ok) {
      const sales = await response.json();

      // Prepare data for the PDF report
      const reportDetails = {
        totalSales: sales.salesData,
        totalRevenue: sales.revenueData
        // Add more data as needed
      };

      // Send data to the server to generate the PDF
      const pdfUrl = 'http://localhost:8080/admin/adminPanel/pdfReport';
      const pdfResponse = await fetch(pdfUrl, {
        method: 'POST',
        body: JSON.stringify({ reportDetails: reportDetails }),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (pdfResponse.ok) {
        // Download the generated PDF
        const blob = await pdfResponse.blob();
        const downloadLink = document.createElement('a');
        downloadLink.href = window.URL.createObjectURL(blob);
        downloadLink.download = `Luxicart-Sale-Report.pdf`;
        downloadLink.click();
      } else {
        console.error('Error generating PDF:', pdfResponse.statusText);
      }
    } else {
      console.error('Error fetching data:', response.statusText);
    }
  } catch (error) {
    console.error('Error:', error);
  }
}

   

      
    

    
   
  

  



   
  




  async function fetchAndUpdateCharts() {
    try {
      const selectedDays = Number(document.getElementById('selectionButton').value);
      const url = `/admin/adminPanel?selectedDays=${encodeURIComponent(selectedDays)}`;
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
      });

      if (response.ok) {
        const sales = await response.json();

        // Update the dashboard elements
        document.getElementById('salesDataDisplay').innerText = `₹ ${sales.salesData}`;
        document.getElementById('revenueDataDisplay').innerText = `₹ ${sales.revenueData}`;
        document.getElementById('usrCount').innerText = sales.userCount;

        // Update or initialize the doughnut charts
        updateOrInitializeDoughnutChart('myTotalSalesChart', sales.salesData);
        updateOrInitializeDoughnutChart('myChart', sales.revenueData);
        updateOrInitializeDoughnutChart('userCountChart', sales.userCount);

        // Update or initialize the bar chart
        updateOrInitializeBarChart('mostSoldChart', sales.mostSoldData);

        
      } else {
        console.error('Error fetching data:', response.statusText);
      }
    } catch (error) {
      console.error('Fetch error:', error);
    }
  }

  

  function updateOrInitializeDoughnutChart(canvasId, data) {
    const ctx = document.getElementById(canvasId);
    if (Chart.getChart(ctx)) {
      // If chart exists, update it
      Chart.getChart(ctx).data.datasets[0].data = [data, 900];
      Chart.getChart(ctx).update();
    } else {
      // If chart doesn't exist, initialize it
      new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: ['Label'],
          datasets: [{
            data: [data, 900],
            backgroundColor: ['rgb(243, 88, 0)', 'rgb(214, 214, 214)'],
            hoverOffset: 4
          }]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }
  }

  function updateOrInitializeBarChart(canvasId, mostSoldData) {
    const ctx = document.getElementById(canvasId);
    if (Chart.getChart(ctx)) {
      // If chart exists, update it
      const labels = mostSoldData.map(item => item._id);
      const dataValues = mostSoldData.map(item => item.totalQty);
      Chart.getChart(ctx).data.labels = labels;
      Chart.getChart(ctx).data.datasets[0].data = dataValues;
      Chart.getChart(ctx).update();
    } else {
      // If chart doesn't exist, initialize it
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: mostSoldData.map(item => item._id),
          datasets: [{
            label: 'Label',
            data: mostSoldData.map(item => item.totalQty),
            backgroundColor: 'rgba(243, 88, 0, 0.2)',
            borderColor: 'rgba(243, 88, 0, 1)',
            borderWidth: 1
          }]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }
  }

  // pdf

 

 


  async function getChartImage(canvasId) {
    const canvas = document.getElementById(canvasId);
    return new Promise(resolve => {
      canvas.toBlob(blob => {
        resolve(URL.createObjectURL(blob));
      });
    });
  }
</script>


<script>
  // const exportPDFReport = document.getElementById('pdfDownlod')
  // exportButton.addEventListener("click", function(){
  //   const reportDetails = {
  //     totalSales : '<%= salesData %>',
  //     totalRevenue : '<%=  revenueData %>'

  //   }
  //   const url = 'http://localhost:8080/admin/adminPanel/pdfReport'
  //   fetch(url, {
  //     method : 'POST',
  //     body : JSON.stringify({ reportDetails : reportDetails}),
  //     headers: {
  //                'Content-Type': 'application/json',
  //                 },
  //   })
  //   .then(response=> response.blob())
  //   .then(blob => {
  //     const downloadLink = document.createElement('a');
  //               downloadLink.href = window.URL.createObjectURL(blob);
  //               downloadLink.download = `Luxicart-Sale Report.pdf`
  //               downloadLink.click()

  //   })
  //   .catch(error => {
  //               console.error('Error:', error);
  //           });

  // })
  
</script>



<!-- const url = `http://localhost:8080/admin/adminPanel?selectedDays=${encodeURIComponent(selectedDays)}`; --> 